import type { userWithActivities } from '@/types'
import UserCard from '../cards/UserCard'
import { Send, User } from 'lucide-react'
import { ScrollArea } from "@/components/ui/scroll-area";
import { useEffect, useState } from 'react'
import useChatStore from '@/stores/ChatStore'
import { useUser, useAuth } from '@clerk/clerk-react'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { ScrollBar } from '@/components/ui/scroll-area'

const ChatMessages = ({ receiver }: { receiver: userWithActivities }) => {
    const { getToken } = useAuth();
    const { user } = useUser();
    const [loading, setLoading] = useState(false);
    const { fetchMessages, messages, sendMessage, setMessage,newMessageIds } = useChatStore();
    const [newMessage, setNewMessage] = useState("");

    const handleSend = () => {
        if (!user || !receiver.clerkId) return;
        sendMessage({ content: newMessage, receiverId: receiver.clerkId, senderId: user.id })
        setMessage({ content: newMessage, receiverId: receiver.clerkId, senderId: user.id });
        setNewMessage("");
    }

    const formatTimestamp = (timestamp: string) => {
        const date = new Date(timestamp);
        const now = new Date();
        const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);

        if (diffInHours < 24) {
            return date.toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit',
                hour12: true
            });
        } else {
            return date.toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                hour12: true
            });
        }
    };

    useEffect(() => {
        async function fetchData() {
            setLoading(true);
            const token = await getToken();
            if (!token) return;
            if (!receiver.clerkId && !user) return;
            fetchMessages(token, receiver.clerkId,user.id);
        }
        fetchData();
    }, [receiver.clerkId])

    useEffect(() => {
        console.log("messages", messages);
    }, [messages])

    return (
        <div className='h-full flex flex-col bg-zinc-900'>
            {/* Header */}
            <div className='border-b border-zinc-700 bg-zinc-800/50 backdrop-blur-sm sticky top-0 z-10'>
                <div className='p-4'>
                    <UserCard user={receiver} />
                </div>
            </div>

            {/* Messages Container */}
            <ScrollArea className='flex-1 h-[calc(100vh-270px)]'>
                <div className='p-4 space-y-4'>
                    {messages.length === 0 ? (
                        <div className='flex flex-col items-center justify-center h-full text-zinc-400 py-20'>
                            <div className='w-16 h-16 rounded-full bg-zinc-800 flex items-center justify-center mb-4'>
                                <User className='w-8 h-8' />
                            </div>
                            <p className='text-lg font-medium'>Start a conversation</p>
                            <p className='text-sm'>Send a message to get started</p>
                        </div>
                    ) : (
                        messages.map((message, index) => {
                            const isCurrentUser = message.senderId === user?.id;
                            const showAvatar = index === 0 || messages[index - 1].senderId !== message.senderId;
                            const showTimestamp = index === 0 || 
                                new Date(message.createdAt).getTime() - new Date(messages[index - 1].createdAt).getTime() > 300000; // 5 minutes
                          const isNewMessage = newMessageIds?.has(message._id);
                            return (
                                <div key={message._id} className='group'>
                                    {/* Timestamp Divider */}
                                    {showTimestamp && (
                                        <div className='flex items-center justify-center my-4'>
                                            <div className='bg-zinc-800 text-zinc-400 text-xs px-3 py-1 rounded-full'>
                                                {formatTimestamp(message.createdAt)}
                                            </div>
                                        </div>
                                    )}

                                    {/* Message */}
                                    <div className={`flex items-end gap-2 ${isCurrentUser ? 'flex-row-reverse' : 'flex-row'}`}>
                                        {/* Avatar */}
                                        <div className={`w-8 h-8 rounded-full flex-shrink-0 ${showAvatar ? 'opacity-100' : 'opacity-0'}`}>
                                            {isCurrentUser ? (
                                                <div className='w-full h-full rounded-full bg-green-500 flex items-center justify-center text-white text-sm font-medium'>
                                                    {user?.firstName?.charAt(0) || user?.username?.charAt(0) || 'Y'}
                                                </div>
                                            ) : (
                                                <div className='w-full h-full rounded-full bg-blue-500 flex items-center justify-center text-white text-sm font-medium'>
                                                    {receiver.firstName?.charAt(0) || receiver.username?.charAt(0) || 'U'}
                                                </div>
                                            )}
                                        </div>

                                        {/* Message Bubble */}
                                        <div className={`max-w-[70%] ${isCurrentUser ? 'items-end' : 'items-start'} flex flex-col`}>
                                            <div className={`
                                                px-4 py-2 rounded-2xl text-sm leading-relaxed break-words
                                                ${isCurrentUser 
                                                    ? 'bg-green-600 text-white rounded-br-md' 
                                                    : 'bg-zinc-800 text-zinc-100 rounded-bl-md'
                                                }
                                                ${showAvatar ? '' : isCurrentUser ? 'rounded-br-2xl' : 'rounded-bl-2xl'}
                                                shadow-lg
                                                group-hover:shadow-xl transition-shadow duration-200
                                            `}>
                                               {isNewMessage && (
              <div className="absolute -top-2 -right-2 bg-red-500 text-white text-xs px-2 py-1 rounded-full shadow-lg animate-pulse">
                NEW
              </div>
            )}
                                                {message.content}
                                            </div>
                                            
                                            {/* Message time (shown on hover) */}
                                            <div className={`
                                                text-xs text-zinc-500 mt-1 opacity-0 group-hover:opacity-100 
                                                transition-opacity duration-200 ${isCurrentUser ? 'text-right' : 'text-left'}
                                            `}>
                                                {new Date(message.createdAt).toLocaleTimeString('en-US', {
                                                    hour: '2-digit',
                                                    minute: '2-digit'
                                                })}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            )
                        })
                    )}
                </div>
            </ScrollArea>

            {/* Message Input */}
            <div className='p-4 border-t border-zinc-700 bg-zinc-800/30 backdrop-blur-sm'>
                <div className='flex gap-3 items-end'>
                    <div className='flex-1 relative'>
                        <Input
                            placeholder={`Message ${receiver.firstName || receiver.username || 'user'}...`}
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            className='bg-zinc-800 border-zinc-700 text-zinc-100 placeholder:text-zinc-400 
                                     focus:border-green-500 focus:ring-green-500/20 rounded-full px-4 py-3
                                     resize-none min-h-[44px] max-h-32'
                            onKeyDown={(e) => {
                                if (e.key === "Enter" && !e.shiftKey) {
                                    e.preventDefault();
                                    handleSend();
                                }
                            }}
                        />
                    </div>

                    <Button 
                        size="icon" 
                        onClick={handleSend} 
                        disabled={!newMessage.trim()}
                        className={`
                            w-11 h-11 rounded-full transition-all duration-200
                            ${newMessage.trim() 
                                ? 'bg-green-600 hover:bg-green-500 text-white shadow-lg hover:shadow-green-500/25' 
                                : 'bg-zinc-700 text-zinc-400 cursor-not-allowed'
                            }
                        `}
                    >
                        <Send className='w-4 h-4' />
                    </Button>
                </div>
            </div>
        </div>
    )
}

export default ChatMessages